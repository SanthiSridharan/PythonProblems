def is_valid_strdigit(c, base=2):
    if type(c) is not str: return False  # Reject non-string digits
    if (type(base) is not int) or (base < 2) or (base > 36): return False  # Reject non-integer bases outside 2-36
    if base < 2 or base > 36: return False  # Reject bases outside 2-36
    if len(c) != 1: return False  # Reject anything that is not a single character
    if '0' <= c <= str(min(base - 1, 9)): return True  # Numerical digits for bases up to 10
    if base > 10 and 0 <= ord(c) - ord('a') < base - 10: return True  # Letter digits for bases > 10
    return False  # Reject everything else


def valid_strdigits(base=2):
    POSSIBLE_DIGITS = '0123456789abcdefghijklmnopqrstuvwxyz'
    return [c for c in POSSIBLE_DIGITS if is_valid_strdigit(c, base)]


def print_valid_strdigits(base=2):
    valid_list = valid_strdigits(base)
    if not valid_list:
        msg = '(none)'
    else:
        msg = ', '.join([c for c in valid_list])
    print('The valid base ' + str(base) + ' digits: ' + msg)


# Quick demo:
# print_valid_strdigits(6)
# print_valid_strdigits(16)
# print_valid_strdigits(23)

def eval_strint(s, base=2):
    assert type(s) is str
    assert 2 <= base <= 36
    return int(s,base)



from fractions import Fraction


def is_valid_strfrac(s, base=2):
    return all([is_valid_strdigit(c, base) for c in s if c != '.']) \
           and (len([c for c in s if c == '.']) <= 1)


def is_binary(x):
 return set(x) <= set('01')

def eval_strfrac(s, base=2):
    assert is_valid_strfrac(s, base), "'{}' contains invalid digits for a base-{} number.".format(s, base)
    slist = [i for i in s if i !="."]
    news = "".join(slist)
    try:
        dot_position = len(s) - s.index(".") -1
    except:
        dot_position = 0
    converted = int(news, base=base) /  (base ** dot_position)
    # print("Converted", converted)
    return converted

# print("Eval", eval_strfrac(1.0 + (2 ** (-52)),16))



# Test 0: `eval_strfrac_test0` (1 point)

def check_eval_strfrac(s, v_true, base=2, tol=1e-7):
#     Test 0: `eval_strfrac_test0` (1 point)
    #
    def check_eval_strfrac(s, v_true, base=2, tol=1e-7):
        v_you = eval_strfrac(s, base)
        assert type(v_you) is float, "Your function did not return a `float` as instructed."
        delta_v = v_you - v_true
        msg = "[{}]_{{{}}} ~= {}: You computed {}, which differs by {}.".format(s, base, v_true,
                                                                                v_you, delta_v)
        # print(msg)
        assert abs(delta_v) <= tol, "Difference exceeds expected tolerance."



# Test cases from the video
check_eval_strfrac('3.14', 3.14, base=10)
check_eval_strfrac('100.101', 4.625, base=2)
check_eval_strfrac('11.0010001111', 3.1396484375, base=2)

# A hex test case
check_eval_strfrac('f.a', 15.625, base=16)


# print("\n(Passed!)")



# Demo of `float.hex()`
# v = -1280.03125
# print(v.hex())

import struct
def float32_bit_pattern(value):
    return sum(b << 8*i for i,b in enumerate(struct.pack('f', value)))

def int_to_binary(value, bits):
    return bin(value).replace('0b', '').rjust(bits, '0')

def fp_bin(v):
def fp_bin(v):

    # convert  to a float
    v = float(v)
    # Get the hex value 
    v = v.hex() #Convert float to its hexadecimal values to extact sign, number and exponent

    v = v.split('0x') #Split to extract the sign portion

    # Sign portion v[0]

    if v[0]== "-": #Check and populate the sign
        v_sign = v[0]
    else:
        v_sign = "+"

    # split the number and power  parts 
    lst_bin_exp = v[1].split('p')
    # get the power part 
    v_exp = int(lst_bin_exp[1])
    # get the number parts to format 
    try:
        dot_position = lst_bin_exp[0].index(".")
        secondpart =   lst_bin_exp[0][dot_position+1:]
    except:
        dot_position = len(lst_bin_exp[0])
        secondpart = "0"

    firstpart = lst_bin_exp[0][:dot_position]
    secondpart = bin(int(secondpart, 16))[2:].zfill(52)
    v_signif = str(firstpart) + "." + secondpart
    
    return

print(fp_bin(0.0))
print(fp_bin(-0.1))
print(fp_bin(123.23))
print(fp_bin(-123.23))
print(fp_bin(16))




#
# Test: `fp_bin_test0` (2 points)
#
# Test: `fp_bin_test0` (2 points)

def assert_fp_bin_props(v_you_tuple):
    assert len(
        v_you_tuple) == 3, "Your floating point value should be a tuple with three components; yours has {}.".format(
        len(v_you_tuple))
    v_you_sign, v_you_signif, v_you_exp = v_you_tuple
    print("V You Excp", type(v_you_exp))
    assert v_you_sign in ['+', '-'], "Your sign is '{}' instead of either '+' or '-'".format(v_you_sign)
    assert type(v_you_signif) is str, "Your significand is a '{}', rather than a string ('str').".format(
        type(v_you_signif))
    assert len(v_you_signif) == 54, "Your significand has {} chars instead of 54.".format(len(v_you_signif))
    assert v_you_signif[
               1] == '.', "Your significand should have a point (period) character in it at position 1, but has a '{}' instead.".format(
        v_you_signif[1])
    assert v_you_signif[0] in ['0', '1'], "Your significand have a leading 0 or 1, not a '{}'".format(v_you_signif[1])
    assert all(
        [c in ['0', '1'] for c in v_you_signif[2:]]), "Your significand should only have binary digits ('0' or '1')"
    assert type(v_you_exp) is int, "Your exponent should be an integer value, but isn't (it has type '{}')".format(
        type(v_you_exp))
    assert -1022 <= v_you_exp <= 1023, "The exponent of {} lies outside the interval, [-1022, 1023].".format(v_you_exp)


def check_fp_bin(v, x_true):
    x_you = fp_bin(v)
    print("""{} [{}] ==
         {}
vs. you: {}
""".format(v, v.hex(), x_true, x_you))
    assert_fp_bin_props(x_you)
    assert x_you == x_true, "Results do not match!"
#
#
check_fp_bin(0.0, ('+', '0.0000000000000000000000000000000000000000000000000000', 0))
check_fp_bin(-0.1, ('-', '1.1001100110011001100110011001100110011001100110011010', -4))
# check_fp_bin(1.0 + (2 ** (-52)), ('+', '1.0000000000000000000000000000000000000000000000000001', 0))
#
check_fp_bin(-1280.03125, ('-', '1.0100000000000010000000000000000000000000000000000000', 10))
# check_fp_bin(6.2831853072, ('+', '1.1001001000011111101101010100010001001000011011100000', 2))
check_fp_bin(-0.7614972118393695, ('-', '1.1000010111100010111101100110100110110000110010000000', -1))


# print("\n(Passed!)")
